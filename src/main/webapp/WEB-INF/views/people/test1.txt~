@PostMapping()
public String create(@RequestParam("name") String name,
    @RequestParam("age") int age,
    @RequestParam("email") String email,
    Model model) {

Person person = new Person();

person.setName(name);
person.setAge(age);
person.setEmail(email);

model.addAttribute("person", person);

return "successPage";

}

МЕТОД SAVE , запрос SQL
String SQL = "INSERT INTO Person VALUES(" + 1 + ",'" + person.getName()  +
            "'," + person.getAge() + ",'" + person.getEmail() + "')"; // так писать нежелательно во избежание SQL инъекции
            // (у нас пользователь может сломать приложение)

            // INSERT INTO Person VALUES(1,'Tom', 18, 'tom@ya.ru')

// SQL команды
create table Person(
    id int, // SERIAL PRIMARY KEY указывает что это первичный ключ уникальный
    name varchar,
    age int,
    email varchar
) SQL команда дял создания таблицы

ограничения для таблицы :
NOT NULL - поле не может быть пустым
UNIQUE - поле должно быть уникальным
PRIMARY KEY - поле будет первичным ключом
FOREIGN KEY - поле будет ссылкой на другую таблицу ( person_id INT REFERENCES Person(id), -- Внешний ключ, ссылающийся на таблицу Person)
CHECK - проверяет условие ( age INT CHECK (age >= 0), -- Возраст должен быть неотрицательным)
 DEFAULT 18, -- Если возраст не указан, по умолчанию будет 18
 
drop table Person; SQL команда дял удаления таблицы

delete from person; SQL команда дял очистки таблицы (удаление всех данных)

insert into person(тут можно указать колонки куда втсавить данные ,
либо просто в values сразу во все) values(1, 'Tom', 18, 'tom@ya.ru'); SQL команда дял вставки данных

DELETE FROM Person WHERE id = 1; SQL команда дял удаления данных по ключу

UPDATE Person SET name = 'Tom' WHERE id = 1; SQL команда дял обновления данных

SELECT * FROM Person; SQL команда дял выборки данных